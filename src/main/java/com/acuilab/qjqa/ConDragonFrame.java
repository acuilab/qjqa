/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.acuilab.qjqa;

import static com.acuilab.qjqa.Main.API_KEY;
import static com.acuilab.qjqa.Main.APP_ID;
import static com.acuilab.qjqa.Main.SECRET_KEY;
import com.baidu.aip.ocr.AipOcr;
import java.awt.AWTException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.awt.image.RenderedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author 78429
 */
public class ConDragonFrame extends javax.swing.JFrame {
    
    public static final Rectangle RECT_CODE = new Rectangle(746, 587, 94, 38);
    public static final Rectangle RECT_LIFE = new Rectangle(758, 822, 100, 21);
    public static final Rectangle RECT_FAILED = new Rectangle(834, 528, 251, 36);
    
    // 战斗失败确定按钮位置
    public static final int FAILED_OK_X = 961;
    public static final int FAILED_OK_Y = 689;
    
    // 返回营地按钮位置
    public static final int RETURN_X = 989;
    public static final int RETURN_Y = 567;
    
    // 我的材料按钮位置
    public static final int METERIAL_X = 958;
    public static final int METERIAL_Y = 737;
    
    // 战斗按钮位置
    public static final int FIGHT_X = 742;
    public static final int FIGHT_Y = 970;
    
    // 开始战斗按钮位置
    public static final int FIGHTING_X = RETURN_X;
    public static final int FIGHTING_Y = RETURN_Y;
    
    // 地图
    public static final int MAP_X = 957;
    public static final int[] MAP_Y = new int[] {474, 577, 699, 800};
    
    // 输入验证码
    public static final int INPUT_X = 953;
    public static final int INPUT_Y = 607;
    
    // 输入验证码
    public static final int INPUT_OK_X = 1122;
    public static final int INPUT_OK_Y = 610;
    
    private ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
    private Robot robot;
    
    private static final int INITIAL_DELAY = 1000;
    private static final int DELAY = 5000;
    private static final int ROBOT_DELAY = 2000;
    
    private static final Random rand = new Random();

    /**
     * Creates new form ConDragonFrame
     */
    public ConDragonFrame() {
        initComponents();
        
        try {
            robot = new Robot();
        } catch (AWTException ex) {
            Logger.getLogger(ConDragonFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stopBtn = new javax.swing.JButton();
        startBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ConGragon自动战斗");
        setAlwaysOnTop(true);

        stopBtn.setText("停止");
        stopBtn.setEnabled(false);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        startBtn.setText("开始");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        logTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("日志"));
        jScrollPane1.setViewportView(logTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(startBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopBtn)
                    .addComponent(startBtn))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        if(executorService.isShutdown()) {
            executorService = Executors.newSingleThreadScheduledExecutor();
        }
     
        executorService.scheduleWithFixedDelay(new Runnable() {
            @Override
            public void run() {
                try {
                    // 战斗失败
                    String str = getFailed();
                    System.out.println("failed str=" + str);
                    if(StringUtils.startsWith(str, "战斗失败")) {
                        addLog("战斗失败确定...");
                        // 战斗失败
                        robot.mouseMove(FAILED_OK_X, FAILED_OK_Y);
                        robot.mousePress(KeyEvent.BUTTON1_MASK);
                        robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                        robot.delay(ROBOT_DELAY);
                        
                        addLog("返回营地确定...");
                        // 返回营地
                        robot.mouseMove(RETURN_X, RETURN_Y);
                        robot.mousePress(KeyEvent.BUTTON1_MASK);
                        robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                        robot.delay(ROBOT_DELAY);
                        
                        addLog("我的材料确定...");
                        // 我的材料
                        robot.mouseMove(METERIAL_X, METERIAL_Y);
                        robot.mousePress(KeyEvent.BUTTON1_MASK);
                        robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                        robot.delay(ROBOT_DELAY);
                        
                        addLog("切换到战斗页面...");
                        // 战斗
                        robot.mouseMove(FIGHT_X, FIGHT_Y);
                        robot.mousePress(KeyEvent.BUTTON1_MASK);
                        robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                        robot.delay(ROBOT_DELAY);
                        
                        addLog("开始战斗...");
                        // 开始战斗
                        robot.mouseMove(FIGHTING_X, FIGHTING_Y);
                        robot.mousePress(KeyEvent.BUTTON1_MASK);
                        robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                        robot.delay(ROBOT_DELAY);
                        
                        addLog("选择地图...");
                        // 随机选择四幅地图之一
                        robot.mouseMove(MAP_X, MAP_Y[rand.nextInt(4)]);
                        robot.mousePress(KeyEvent.BUTTON1_MASK);
                        robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                        robot.delay(ROBOT_DELAY);
                        
                        addLog("识别验证码...");
                        // 识别验证码
                        str = getCode();
                        System.out.println("code str=" + str);
                        Pattern pattern = Pattern.compile("\\d{4}");
                        boolean matches = pattern.matcher(str).matches();
                        if(matches) {
                            // 1 焦点
                            addLog("识别验证码——焦点");
                            robot.mouseMove(INPUT_X, INPUT_Y);
                            robot.mousePress(KeyEvent.BUTTON1_MASK);
                            robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                            robot.delay(ROBOT_DELAY);
                            
                            // 2 发现有时文本粘贴不上，可能是失去了焦点，这里再点击一次
                            addLog("识别验证码——焦点2");
                            robot.mouseMove(INPUT_X, INPUT_Y);
                            robot.mousePress(KeyEvent.BUTTON1_MASK);
                            robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                            robot.delay(ROBOT_DELAY);
                            
                            // 3 使用剪贴板完成文本输入
                            addLog("识别验证码——使用剪贴板完成文本输入：" + str);
                            StringSelection stringSelection = new StringSelection(str);
                            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                            clipboard.setContents(stringSelection, stringSelection);
                            robot.keyPress(KeyEvent.VK_CONTROL);
                            robot.keyPress(KeyEvent.VK_V);
                            robot.keyRelease(KeyEvent.VK_V);
                            robot.keyRelease(KeyEvent.VK_CONTROL);
                            robot.delay(ROBOT_DELAY);
                            
                            // 4 单击确定
                            addLog("识别验证码——单击确定");
                            robot.mouseMove(INPUT_OK_X, INPUT_OK_Y);
                            robot.mousePress(KeyEvent.BUTTON1_MASK);
                            robot.mouseRelease(KeyEvent.BUTTON1_MASK);
                            robot.delay(250);
                        }
                    } else {
                        addLog("正在战斗...");
                    }
                    
                } catch (IOException | AWTException ex) {
                    ex.printStackTrace();
                }
            }
            
        }, INITIAL_DELAY, DELAY, TimeUnit.MILLISECONDS);
        
        startBtn.setEnabled(false);
        stopBtn.setEnabled(true);
    }//GEN-LAST:event_startBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        executorService.shutdown();
        
        stopBtn.setEnabled(false);
        startBtn.setEnabled(true);
    }//GEN-LAST:event_stopBtnActionPerformed

    // {"log_id":6925580378552636534,"words_result":[{"words":"战斗失败。请返回营地"}],"words_result_num":1}
    private String getCode() throws IOException, AWTException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
        
        // 先捕获一张图片保存到本地
        Image imageSaved = robot.createScreenCapture(RECT_CODE);
        ImageIO.write((RenderedImage)imageSaved, "png", bos);
        
        byte[] file = bos.toByteArray();
        
        // 初始化一个AipOcr
        AipOcr client = new AipOcr(APP_ID, API_KEY, SECRET_KEY);

//        // 可选：设置网络连接参数
//        client.setConnectionTimeoutInMillis(2000);
//        client.setSocketTimeoutInMillis(60000);

//        // 可选：设置代理服务器地址, http和socket二选一，或者均不设置
//        client.setHttpProxy("proxy_host", proxy_port);  // 设置http代理
//        client.setSocketProxy("proxy_host", proxy_port);  // 设置socket代理

//        // 可选：设置log4j日志输出格式，若不设置，则使用默认配置
//        // 也可以直接通过jvm启动参数设置此环境变量
//        System.setProperty("aip.log4j.conf", "path/to/your/log4j.properties");

        // 调用接口（通用文字识别（高精度版））
        JSONObject json = client.basicAccurateGeneral(file, new HashMap<>());
        
        return getWordsResult(json);
    }
    
    private String getLife() throws IOException, AWTException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
        
        // 先捕获一张图片保存到本地
        Image imageSaved = robot.createScreenCapture(RECT_LIFE);
        ImageIO.write((RenderedImage)imageSaved, "png", bos);
        
        byte[] file = bos.toByteArray();
        
        // 初始化一个AipOcr
        AipOcr client = new AipOcr(APP_ID, API_KEY, SECRET_KEY);

        // 调用接口（通用文字识别（高精度版））
        JSONObject json = client.basicAccurateGeneral(file, new HashMap<>());
        
        return getWordsResult(json);
    }
    
    private String getFailed() throws IOException, AWTException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
        
        // 先捕获一张图片保存到本地
        Image imageSaved = robot.createScreenCapture(RECT_FAILED);
        ImageIO.write((RenderedImage)imageSaved, "png", bos);
        
        byte[] file = bos.toByteArray();
        
        // 初始化一个AipOcr
        AipOcr client = new AipOcr(APP_ID, API_KEY, SECRET_KEY);

        // 调用接口（通用文字识别（高精度版））
        JSONObject json = client.basicAccurateGeneral(file, new HashMap<>());
        
        return getWordsResult(json);
    }
    
    private String getWordsResult(JSONObject json) {
        StringBuilder sb = new StringBuilder();
        JSONArray jsonArray = json.getJSONArray("words_result");
        for(int i=0; i<jsonArray.length(); i++) {
            JSONObject obj = jsonArray.getJSONObject(i);
            String words = obj.getString("words");
            sb.append(words);
        }
        return sb.toString();
    }
    
    private void addLog(String log) {
        logTextArea.append(DateUtils.formatDate(new Date(), "yyyy-MM-dd HH:mm:ss") + " " + log + "\n");
        logTextArea.setCaretPosition(logTextArea.getText().length());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConDragonFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConDragonFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConDragonFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConDragonFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConDragonFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    // End of variables declaration//GEN-END:variables
}
